#             DC Block structure
# ============================================
# ============================================
# ============================================
# ===              Version                 ===
# ============================================
# ===             Soc Class                ===
# ============================================
# ===                UUID                  ===
# ============================================
# ===    RoT Meta SHA256 of following:     ===
# ===          RoT Key0 SHA256             ===
# ===          RoT Key1 SHA256             ===
# ===          RoT Key2 SHA256             ===
# ===          RoT Key3 SHA256             ===
# ============================================
# ===        Debugger Key DCK (Pub):       ===
# ===           Mod: 2048 Exp: 32          ===
# ============================================
# ===              CC SOCU                 ===
# ============================================
# ===               CC VU                  ===
# ============================================
# ===                 CB                   ===
# ============================================
# ===            RoT Key (pub)             ===
# ===           Mod: 2048 Exp: 32          ===
# ============================================
# ============================================
# ===       Signature of all block         ===
# ===  SHA256 of whole block => RSA(RoTK)  ===
# ============================================
# ============================================
# ============================================

# ============ SoC Class ============
# A unique identifier for a set of SoCs that require no SoC-specific differentiation in
# their debug authentication. The main usage is to allow a different set of debug
# domains and options to be negotiated between the device configuration and
# credentials. A class can contain just a single revision of a single SoC model, if the
# granularity of debug control warrants it.
# Examples list of possible settings:
# 0x0000:       i.MXRT595, i.MXRT685,
# 0x0001:       LPC550x, LPC55s0x, LPC551x, LPC55s1x, LPC552x, LPC55s2x, LPC55s6x
# 0x0004:       LPC55s3x, RW61x

socc: 0x0004

# ============ Device UUID ============
# 128-bit IETF RFC4122 compliant non-sequential Universally Unique Identifier (UUID)
uuid: "00000000000000000000000000000000"

# ============ SoC Usage ============
# A CC (constraint) value that is a bit mask, and whose bits are used in an
# SoCC-specific manner. These bits are typically used for controlling which debug
# domains are accessed via the authentication protocol, but device-specific debug
# options can be managed in this way also.
cc_socu: 0xFFFF

# ============ Vendor Usage ============
# A CC (constraint) value that is opaque to the debug authentication protocol itself but
# which can be leveraged by vendors in product-specific ways.
cc_vu: 0x0000

# ============ Credential Beacon & Authentication beacon ============
# A value that is passed through the authentication protocol, which is not interpreted
# by the protocol but is instead made visible to the application being debugged. A
# credential beacon is associated with a DC and is therefore vendor/RoT-signed. An
# authentication beacon is provided and signed by the debugger during the
# authentication process.
cc_beacon: 0x0000

# ============ RoT meta-data ============
# The RoT meta-data required by the device to corroborate; the ROTID sent in the
# DAC, the field in this DC, and any additional RoT state that is not stored within the
# device. This allows different RoT identification, management and revocation
# solutions to be handled.
rot_meta: ['../keys/ROT1_p256.pub', '../keys/ROT2_p256.pub', '../keys/ROT3_p256.pub', '../keys/ROT4_p256.pub']

# ============ RoT Identifier ============
# RoTID allows the debugger to infer which RoT public key(s) are acceptable to the
# device. If the debugger cannot or does not provide such a credential, the
# authentication process will fail.
rot_id: 0

# ============ Debug Credential Key ============
# A user-owned key pair. The public part of the key is associated with a DC, the
# private part is held by the user and used to produce signatures during
# authentication.
dck: debug_authentication_key_ECC_256.pub

# ==================================================================================================
#               Signature configuration area
# ==================================================================================================
# There are two ways how sign the final DC data blob.
#
# 1. In case that you is available private pair for rot_meta with index rot_id just use first simple style
#    to use it by rotk key. As a second way to do same is use sign_provider option with 'type=file'.
#
# 2. For case that Debug Credential files are generated in untrusted environment (without access to RoT private keys),
#    there is option to use plugin (example how to create own plugin is in: ./SPSDK/examples/dat/hsm/). The plugin
#    has simple interface that allows handle DC data blob into plugin with index of RoT meta public key to get back signed
#    DC image.
#
#    Those options are exclusive, so only one option could be used to sign the DC.

# ============ Signature Provider ============
# To use signing provider examples
#
# sign_provider: 'type=file;file_path=./hsm/k0_cert0_2048.pem'
# sign_provider: : 'type=sasp;key_number=0'

# ============ RoT signature private key ============
# Private key for for the RoT meta chosen by rot_id to sign the image.
rotk: ../keys/ROT1_p256.pem